//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: ggseq_ui.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#ifdef __GNUG__
    #pragma implementation "ggseq_ui_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "ggseq_ui_wdr.h"


// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include <wx/dirctrl.h>
#include <wx/tglbtn.h>
#include "ui_helper.h"

// Implement window functions

wxSizer *MainFrameFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSplitterWindow *item1 = new wxSplitterWindow( parent, ID_MAIN_SPLITTER, wxDefaultPosition, wxSize(200,160), wxSP_LIVE_UPDATE|wxCLIP_CHILDREN );
    item1->SetMinimumPaneSize( 1 );
    wxPanel *item2 = new wxPanel( item1, -1 );
    DirTreePanelFunc( item2, FALSE, TRUE );
    wxPanel *item3 = new wxPanel( item1, -1 );
    TimelinePanelFunc2( item3, FALSE, TRUE );
    item1->SplitVertically( item2, item3 );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *DirTreePanelFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxWindow *item1 = MakeDirTree(parent, ID_DIRTREE);
//wxWindow *item1 = parent->FindWindow( ID_DIRTREE );
    wxASSERT( item1 );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TimelinePanelFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxWindow *item2 = new wxTextCtrl( parent, ID_TL_PANEL);
//wxWindow *item2 = parent->FindWindow( ID_TL_PANEL );
    wxASSERT( item2 );
    item1->Add( item2, 1, wxALIGN_CENTER|wxALL, 5 );

    wxSlider *item3 = new wxSlider( parent, ID_SLIDER, 0, 0, 100, wxDefaultPosition, wxSize(20,100), wxSL_VERTICAL );
    item1->Add( item3, 0, wxALIGN_CENTER, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxBOTTOM, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxListCtrl *item5 = new wxListCtrl( parent, ID_LISTCTRL, wxDefaultPosition, wxSize(160,120), wxLC_LIST|wxSUNKEN_BORDER );
    item4->Add( item5, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxRIGHT, 5 );

    item0->Add( item4, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxBOTTOM, 5 );

    wxStaticBox *item7 = new wxStaticBox( parent, -1, wxT("") );
    wxStaticBoxSizer *item6 = new wxStaticBoxSizer( item7, wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, wxT("Miniplayer"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxRIGHT, 5 );

    wxBitmapButton *item9 = new wxBitmapButton( parent, ID_BITMAPBUTTON, GgseqBitmapsFunc( 0 ), wxDefaultPosition, wxDefaultSize );
    item6->Add( item9, 0, wxALIGN_CENTER|wxRIGHT, 5 );

    wxBitmapButton *item10 = new wxBitmapButton( parent, ID_BITMAPBUTTON, GgseqBitmapsFunc( 1 ), wxDefaultPosition, wxDefaultSize );
    item6->Add( item10, 0, wxALIGN_CENTER|wxRIGHT, 5 );

    wxSlider *item11 = new wxSlider( parent, ID_SLIDER, 0, 0, 100, wxDefaultPosition, wxSize(100,20), wxSL_HORIZONTAL );
    item6->Add( item11, 1, wxALIGN_CENTER, 5 );

    item0->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TimelinePanelFunc2( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSplitterWindow *item1 = new wxSplitterWindow( parent, ID_TIMELINE_SPLITTER, wxDefaultPosition, wxSize(200,160), wxSP_LIVE_UPDATE|wxCLIP_CHILDREN );
    item1->SetMinimumPaneSize( 1 );
    wxPanel *item2 = new wxPanel( item1, -1 );
    TimelineFunc( item2, FALSE, TRUE );
    wxPanel *item3 = new wxPanel( item1, -1 );
    SampleListFunc( item3, FALSE, TRUE );
    item1->SplitHorizontally( item2, item3 );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxWindow *item4 = MakeMiniPlayer(parent, ID_TL_MINIPLAYER );
//wxWindow *item4 = parent->FindWindow( ID_TL_MINIPLAYER );
    wxASSERT( item4 );
    item0->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxTOP, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *SetSnapFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, wxT("Length") );
    wxStaticBoxSizer *item2 = new wxStaticBoxSizer( item3, wxVERTICAL );

    wxFlexGridSizer *item4 = new wxFlexGridSizer( 2, 5, 5 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, wxT("Frames"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER, 5 );

    wxSpinCtrl *item6 = new wxSpinCtrl( parent, ID_FRAMES_CTRL, wxT("2500"), wxDefaultPosition, wxSize(100,-1), 0, 2500, 500000, 2500 );
    item4->Add( item6, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("Seconds"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item7, 0, wxALIGN_CENTER, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_SECONDS_CTRL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item4->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, wxT("BPM"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item9, 0, wxALIGN_CENTER, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_BPM_CTRL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item4->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxRIGHT, 5 );

    wxStaticBox *item12 = new wxStaticBox( parent, -1, wxT("Presets") );
    wxStaticBoxSizer *item11 = new wxStaticBoxSizer( item12, wxVERTICAL );

    wxString *strs13 = (wxString*) NULL;
    wxListBox *item13 = new wxListBox( parent, ID_PRESET_LISTBOX, wxDefaultPosition, wxSize(80,100), 0, strs13, wxLB_SINGLE );
    item11->Add( item13, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item14 = new wxTextCtrl( parent, ID_PRESET_NAME_TEXTCTRL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item11->Add( item14, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item16 = new wxButton( parent, ID_DELETE_BUTTON, wxT("Delete"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 1, wxALIGN_CENTER|wxRIGHT, 5 );

    wxButton *item17 = new wxButton( parent, ID_NEW_BUTTON, wxT("New"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item17, 1, wxALIGN_CENTER, 5 );

    item11->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item11, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *SetColourFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    //wxWindow *item2 = parent->FindWindow( ID_COLOUR_DIRTREE );
//wxWindow *item2 = new wxPanel( parent, ID_COLOUR_DIRTREE );
wxWindow *item2 = new wxGenericDirCtrl( parent, ID_COLOUR_DIRTREE, wxDirDialogDefaultFolderStr,
		wxDefaultPosition,
		wxDefaultSize,
		wxDIRCTRL_DIR_ONLY|wxNO_FULL_REPAINT_ON_RESIZE|wxSUNKEN_BORDER);

    wxASSERT( item2 );
    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxRIGHT, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxVERTICAL );

    wxGrid *item4 = new wxGrid( parent, ID_COLOUR_GRID, wxDefaultPosition, wxSize(200,160), wxWANTS_CHARS|wxSUNKEN_BORDER );
    item4->CreateGrid( 0, 1, wxGrid::wxGridSelectRows );
    item3->Add( item4, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item6 = new wxButton( parent, ID_COLOUR_ADD_BUTTON, wxT("+"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 1, wxALIGN_CENTER|wxRIGHT, 5 );

    wxButton *item7 = new wxButton( parent, ID_COLOUR_REMOVE_BUTTON, wxT("-"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item7, 1, wxALIGN_CENTER, 5 );

    item3->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5 );

    wxButton *item8 = new wxButton( parent, ID_COLOUR_BUTTON, wxT("Colour"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item1->Add( item3, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *PreferencesFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxNotebook *item2 = new wxNotebook( parent, ID_NOTEBOOK, wxDefaultPosition, wxSize(200,160), 0 );
    wxNotebookSizer *item1 = new wxNotebookSizer( item2 );

    wxPanel *item3 = new wxPanel( item2, -1 );
    SetSnapFunc( item3, FALSE );
    item2->AddPage( item3, wxT("Snap") );

    wxPanel *item4 = new wxPanel( item2, -1 );
    SetColourFunc( item4, FALSE );
    item2->AddPage( item4, wxT("Colours") );

    wxPanel *item5 = new wxPanel( item2, -1 );
    MiscOptsDlgFunc( item5, FALSE );
    item2->AddPage( item5, wxT("Misc. Options") );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item7 = new wxButton( parent, wxID_CANCEL, wxT("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    wxButton *item8 = new wxButton( parent, wxID_OK, wxT("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->SetDefault();
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *SetAccelsFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxGrid *item1 = new wxGrid( parent, ID_ACCELS_GRID, wxDefaultPosition, wxSize(200,160), wxWANTS_CHARS|wxSUNKEN_BORDER );
    item1->CreateGrid( 10, 2, wxGrid::wxGridSelectRows );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ImportPackDlgFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, wxT("Import Package"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->SetFont( wxFont( 12, wxSWISS, wxNORMAL, wxBOLD ) );
    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP, 5 );

    wxStaticLine *item2 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxFlexGridSizer *item3 = new wxFlexGridSizer( 3, 5, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Package"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_PACKAGE_TEXTCTRL, wxT(""), wxDefaultPosition, wxSize(140,-1), wxTE_READONLY );
    item3->Add( item5, 0, wxALIGN_CENTER, 5 );

    wxBitmapButton *item6 = new wxBitmapButton( parent, ID_PACKAGE_BUTTON, GgseqBitmapsFunc( 8 ), wxDefaultPosition, wxDefaultSize );
    item3->Add( item6, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, wxT("Save Contents At"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item7, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_CONTENTS_TEXTCTRL, wxT(""), wxDefaultPosition, wxSize(140,-1), wxTE_READONLY );
    item3->Add( item8, 0, wxALIGN_CENTER, 5 );

    wxBitmapButton *item9 = new wxBitmapButton( parent, ID_CONTENTS_BUTTON, GgseqBitmapsFunc( 8 ), wxDefaultPosition, wxDefaultSize );
    item3->Add( item9, 0, wxALIGN_CENTER, 5 );

    item0->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item10 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item12 = new wxButton( parent, wxID_CANCEL, wxT("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    wxButton *item13 = new wxButton( parent, wxID_OK, wxT("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->SetDefault();
    item11->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item11, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *HelpProgsFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxTreeCtrl *item1 = new wxTreeCtrl( parent, ID_TREECTRL, wxDefaultPosition, wxSize(120,160), wxTR_HAS_BUTTONS|wxSUNKEN_BORDER );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *MiscOptsDlgFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item1 = new wxCheckBox( parent, ID_LOAD_LAST_CHECKBOX, wxT("Load last File on startup"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TrimmerDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxWindow *item2 = parent->FindWindow( ID_WAVE_EDITOR );
    wxASSERT( item2 );
    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Zoom"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxBOTTOM, 5 );

    wxButton *item5 = new wxButton( parent, ID_BUTTON, wxT("+"), wxDefaultPosition, wxSize(20,-1), 0 );
    item3->Add( item5, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxBOTTOM, 5 );

    wxButton *item6 = new wxButton( parent, ID_BUTTON, wxT("-"), wxDefaultPosition, wxSize(20,-1), 0 );
    item3->Add( item6, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxBOTTOM, 5 );

    wxButton *item7 = new wxButton( parent, ID_BUTTON, wxT("Fit"), wxDefaultPosition, wxSize(20,-1), 0 );
    item3->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxLEFT, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item9 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxBitmapButton *item11 = new wxBitmapButton( parent, ID_BITMAPBUTTON, GgseqBitmapsFunc( 10 ), wxDefaultPosition, wxDefaultSize );
    item10->Add( item11, 0, wxALIGN_CENTER|wxRIGHT, 5 );

    wxBitmapButton *item12 = new wxBitmapButton( parent, ID_BITMAPBUTTON, GgseqBitmapsFunc( 2 ), wxDefaultPosition, wxDefaultSize );
    item10->Add( item12, 0, wxALIGN_CENTER|wxRIGHT, 5 );

    wxBitmapButton *item13 = new wxBitmapButton( parent, ID_BITMAPBUTTON, GgseqBitmapsFunc( 14 ), wxDefaultPosition, wxDefaultSize );
    item10->Add( item13, 0, wxALIGN_CENTER|wxRIGHT, 5 );

    wxButton *item14 = new wxButton( parent, ID_LOOP_BUTTON, wxT("Loop"), wxDefaultPosition, wxSize(50,-1), 0 );
    item10->Add( item14, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL, 5 );

    item9->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBitmap *item16 = new wxStaticBitmap( parent, ID_STATICBITMAP, GgseqBitmapsFunc( 5 ), wxDefaultPosition, wxDefaultSize );
    item15->Add( item16, 0, wxALIGN_CENTER|wxRIGHT, 5 );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, wxT("Name:"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxRIGHT, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_TEXTCTRL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item15->Add( item18, 1, wxALIGN_CENTER, 5 );

    item9->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item8->Add( item9, 0, wxALIGN_CENTER, 5 );

    item8->Add( 20, 20, 1, wxALIGN_CENTER, 5 );

    wxFlexGridSizer *item19 = new wxFlexGridSizer( 3, 5, 5 );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, wxT("Timestretch"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxWindow *item21 = parent->FindWindow( ID_TIMESTRETCH_DIAL );
    wxASSERT( item21 );
    item19->Add( item21, 0, wxALIGN_CENTER, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, ID_TIMESTRECH_TEXTCTRL, wxT("1,0"), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item19->Add( item22, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, wxT("Volume"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item23, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxWindow *item24 = parent->FindWindow( ID_VOLUME_DIAL );
    wxASSERT( item24 );
    item19->Add( item24, 0, wxALIGN_CENTER, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, ID_TEXTCTRL, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item19->Add( item25, 0, wxALIGN_CENTER, 5 );

    item8->Add( item19, 0, wxALIGN_CENTER|wxLEFT, 5 );

    item0->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    wxStaticLine *item26 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item26, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxBoxSizer *item27 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item28 = new wxButton( parent, ID_BUTTON, wxT("?"), wxDefaultPosition, wxSize(25,-1), 0 );
    item27->Add( item28, 0, wxALIGN_CENTER|wxTOP|wxBOTTOM, 5 );

    wxButton *item29 = new wxButton( parent, ID_BUTTON, wxT("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item30 = new wxButton( parent, ID_BUTTON, wxT("Apply and Close"), wxDefaultPosition, wxSize(130,-1), 0 );
    item30->SetDefault();
    item27->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item27, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TimelineFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxWindow *item1 = MakeTlPanel(parent, ID_TL_PANEL);
//wxWindow *item1 = parent->FindWindow( ID_TL_PANEL );
    wxASSERT( item1 );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxRIGHT, 5 );

    wxSlider *item2 = new wxSlider( parent, ID_VOLUME_SLIDER, 0, 0, 100, wxDefaultPosition, wxSize(20,100), wxSL_VERTICAL );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *SampleListFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxWindow *item1 = MakeFileList(parent, ID_TL_FILELIST);
//wxWindow *item1 = parent->FindWindow( ID_TL_FILELIST );
    wxASSERT( item1 );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL, 5 );

    wxWindow *item2 = MakeSidePanel(parent, ID_TL_SIDEPANEL, (wxBoxSizer*)item0 );
//wxWindow *item2 = parent->FindWindow( ID_TL_SIDEPANEL );
    wxASSERT( item2 );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TrimmerDialogFunc2( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxWindow *item2 = parent->FindWindow( ID_WAVE_EDITOR );
    wxASSERT( item2 );
    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxToggleButton *item4 = new wxToggleButton( parent, ID_LOOP_BUTTON, wxT("Loop"), wxDefaultPosition, wxSize(50,-1), 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxRIGHT, 5 );

    item3->Add( 10, 10, 1, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, wxT("Timestretch"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item5, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxWindow *item6 = parent->FindWindow( ID_TIMESTRETCH_DIAL );
    wxASSERT( item6 );
    item3->Add( item6, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID_TIMESTRECH_TEXTCTRL, wxT("1,0"), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item3->Add( item7, 0, wxALIGN_CENTER, 5 );

    item0->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    wxStaticLine *item8 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item10 = new wxButton( parent, wxID_CANCEL, wxT("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, wxID_OK, wxT("Apply and Close"), wxDefaultPosition, wxSize(130,-1), 0 );
    item11->SetDefault();
    item9->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item9, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

wxMenuBar *MyMenuBarFunc()
{
    wxMenuBar *item0 = new wxMenuBar;
    
    wxMenu* item1 = new wxMenu;
    item1->Append( ID_NEW, wxT("&New"), wxT("") );
    item1->Append( ID_OPEN, wxT("&Open..."), wxT("") );
    item1->AppendSeparator();
    item1->Append( ID_SAVE, wxT("&Save"), wxT("") );
    item1->Append( ID_SAVEAS, wxT("Save &As..."), wxT("") );
    item1->AppendSeparator();
    item1->Append( ID_WAV_EXPORT, wxT("Export WAV..."), wxT("") );
    item1->Append( ID_SAVEAS_PACK, wxT("Export Package..."), wxT("") );
    item1->Append( ID_IMPORT_PACK, wxT("Import Package..."), wxT("") );
    item1->AppendSeparator();
    item1->Append( ID_QUIT, wxT("&Quit"), wxT("") );
    item0->Append( item1, wxT("&File") );
    
    wxMenu* item2 = new wxMenu;
    item2->Append( ID_UNDO, wxT("&Undo"), wxT("") );
    item2->Append( ID_REDO, wxT("&Redo"), wxT("") );
    item2->AppendSeparator();
    item2->Append( ID_ADD_TRACK, wxT("Add Track"), wxT("") );
    item2->Append( ID_DELETE_TRACK, wxT("Delete Track"), wxT("") );
    item2->AppendSeparator();
    item2->Append( ID_PREFERENCES, wxT("Preferences..."), wxT("") );
    item0->Append( item2, wxT("&Edit") );
    
    wxMenu* item3 = new wxMenu;
    item3->Append( ID_ZOOM_50, wxT("50%"), wxT("") );
    item3->Append( ID_ZOOM_100, wxT("100%"), wxT("") );
    item3->Append( ID_ZOOM_150, wxT("150%"), wxT("") );
    item0->Append( item3, wxT("&View") );
    
    wxMenu* item4 = new wxMenu;
    item4->Append( ID_HELP, wxT("Contents ..."), wxT("") );
    item4->Append( ID_ABOUT, wxT("&About ..."), wxT("") );
    item0->Append( item4, wxT("&Help") );
    
    return item0;
}

// Implement toolbar functions

void MyToolBarFunc( wxToolBar *parent )
{
    parent->SetMargins( 2, 2 );
    
    parent->AddTool( ID_NEW, wxT(""), GgseqBitmapsFunc( 7 ), wxNullBitmap, wxITEM_NORMAL, wxT("New") );
    parent->AddTool( ID_OPEN, wxT(""), GgseqBitmapsFunc( 8 ), wxNullBitmap, wxITEM_NORMAL, wxT("Open...") );
    parent->AddTool( ID_SAVE, wxT(""), GgseqBitmapsFunc( 11 ), wxNullBitmap, wxITEM_NORMAL, wxT("Save") );
    parent->AddTool( ID_SAVEAS, wxT(""), GgseqBitmapsFunc( 12 ), wxNullBitmap, wxITEM_NORMAL, wxT("Save as...") );
    parent->AddTool( ID_WAV_EXPORT, wxT(""), GgseqBitmapsFunc( 15 ), wxNullBitmap, wxITEM_NORMAL, wxT("Export WAV...") );
    parent->AddSeparator();
    parent->AddTool( ID_REWIND, wxT(""), GgseqBitmapsFunc( 10 ), wxNullBitmap, wxITEM_NORMAL, wxT("Rewind") );
    parent->AddTool( ID_PLAY, wxT(""), GgseqBitmapsFunc( 2 ), wxNullBitmap, wxITEM_NORMAL, wxT("Play") );
    parent->AddTool( ID_STOP, wxT(""), GgseqBitmapsFunc( 14 ), wxNullBitmap, wxITEM_NORMAL, wxT("Stop") );
    parent->EnableTool( ID_STOP, FALSE );
    parent->AddSeparator();
    parent->AddTool( ID_PREFERENCES, wxT(""), GgseqBitmapsFunc( 9 ), wxNullBitmap, wxITEM_NORMAL, wxT("Preferences") );
    parent->AddSeparator();
    parent->AddTool( ID_UNDO, wxT(""), GgseqBitmapsFunc( 16 ), wxNullBitmap, wxITEM_NORMAL, wxT("Undo") );
    parent->AddTool( ID_REDO, wxT(""), GgseqBitmapsFunc( 17 ), wxNullBitmap, wxITEM_NORMAL, wxT("Redo") );
    parent->AddSeparator();
    parent->AddTool( ID_HELP, wxT(""), GgseqBitmapsFunc( 4 ), wxNullBitmap, wxITEM_NORMAL, wxT("Help") );
    
    parent->Realize();
}

// Implement bitmap functions

wxBitmap GgseqBitmapsFunc( size_t index )
{
    if (index == 0)
    {
        static const unsigned char data[] = 
        {
            246,246,246,246,246,246,246,246,246,104,104,0,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,123,91,0,154,69,
            0,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,136,78,0,225,13,0,139,80,0,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,134,78,0,226,0,0,242,0,
            0,139,80,0,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,134,78,0,226,0,0,226,0,0,222,13,0,145,69,0,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,134,78,0,226,0,0,215,0,0,202,0,
            0,161,13,0,133,74,44,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            150,71,47,214,0,0,197,0,0,158,6,4,141,54,36,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,147,71,47,194,0,0,166,0,0,141,54,36,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,138,71,47,
            166,0,0,141,53,35,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,133,77,51,141,54,36,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,127,95,63,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246
        };
        wxImage image( 12, 12, (unsigned char*)data, TRUE );
        image.SetMaskColour( 246, 246, 246);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 1)
    {
        static const unsigned char data[] = 
        {
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,104,104,0,104,104,
            0,104,104,0,104,104,0,104,104,0,104,104,0,104,104,0,246,246,246,246,246,246,246,246,246,
            246,246,246,104,104,0,72,174,46,72,174,46,72,174,46,69,174,43,64,173,38,40,171,14,49,
            154,4,104,104,0,246,246,246,246,246,246,246,246,246,104,104,0,60,198,60,55,197,55,40,195,
            40,28,194,28,14,193,14,8,193,8,36,169,13,110,102,16,246,246,246,246,246,246,246,246,246,
            104,104,0,51,195,51,29,194,29,14,193,14,9,193,9,12,191,12,16,190,16,55,161,39,127,
            95,63,246,246,246,246,246,246,246,246,246,104,104,0,16,193,16,9,193,9,7,193,7,20,189,
            20,26,184,26,33,180,33,45,157,29,127,95,63,246,246,246,246,246,246,246,246,246,104,104,0,
            12,192,12,20,189,20,29,186,29,30,179,30,21,177,21,13,177,13,41,157,25,127,95,63,246,
            246,246,246,246,246,246,246,246,104,104,0,31,183,31,28,180,28,25,178,25,14,176,14,16,172,
            16,19,169,19,48,151,32,127,95,63,246,246,246,246,246,246,246,246,246,121,97,47,18,178,18,
            15,178,15,12,178,12,30,166,30,29,162,29,31,161,31,56,144,40,127,95,63,246,246,246,246,
            246,246,246,246,246,127,95,63,127,95,63,127,95,63,127,95,63,127,95,63,127,95,63,127,95,
            63,127,95,63,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246
        };
        wxImage image( 12, 12, (unsigned char*)data, TRUE );
        image.SetMaskColour( 246, 246, 246);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 2)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 7 1",
        "  c None",
        "a c #CE0000",
        "b c #FF0000",
        "c c #686800",
        "d c #A00000",
        "e c #7F5F3F",
        "g c #E20000",
        /* pixels */
        "    c           ",
        "    cc          ",
        "    cbc         ",
        "    cgbc        ",
        "    cggbc       ",
        "    cgggbc      ",
        "    cgggggc     ",
        "    cggaadde    ",
        "    egaadde     ",
        "    eaadde      ",
        "    eadde       ",
        "    edde        ",
        "    ede         ",
        "    ee          ",
        "    e           ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 3)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 17 1",
        "  c None",
        "a c #34C334",
        "b c #7A7A1E",
        "c c #31B031",
        "d c #3434C8",
        "e c #DD1E1E",
        "f c #8E7256",
        "g c #2D2DCD",
        "h c #FF1E1E",
        "i c #29BB29",
        "j c #24C824",
        "k c #5D5DE8",
        "l c #3F3FD4",
        "m c #F11E1E",
        "n c #4FCC4F",
        "o c #2121C4",
        "p c #54CD54",
        /* pixels */
        "                ",
        " bbbbbbbb       ",
        " bhhmmmeb       ",
        " bhmmmeef       ",
        " bmmbbbbbbbb    ",
        " bmebpnnjjab    ",
        " feebnnjjaif    ",
        " fffbnjjaiif    ",
        "    bjjaiicf    ",
        "    bjaibbbbbbbb",
        "    faicbkkllddb",
        "    ffffbklldddf",
        "        bllddggf",
        "        blddggof",
        "        fddgooof",
        "        ffffffff"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 4)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 13 1",
        "  c None",
        "a c Black",
        "b c #9F9F5F",
        "c c #808080",
        "d c #9F9F7F",
        "e c #BFBF9F",
        "f c #3F3F5F",
        "g c #DFDF7F",
        "h c #5F5F3F",
        "i c #5F5F5F",
        "j c #7F7F3F",
        "k c #FFFF9F",
        "m c #7F7F5F",
        /* pixels */
        "                ",
        "      ccccc     ",
        "    ccgkkkgcc   ",
        "   cbkkkkkkkbm  ",
        "   ckgjaajgkkhd ",
        "  cggjaiiajgkbm ",
        "  cgghjgkfagkgh ",
        "  cgkkkkjajgkgh ",
        "  cgkkkjajgkkgh ",
        "  cgkkkajgkkkbm ",
        "   ckkkggkkkkmd ",
        "   cbkkajkkkbm  ",
        "    ccgggkgmm   ",
        "      ckkmmd    ",
        "      ckhd      ",
        "     hhhe       "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 5)
    {
        static const unsigned char data[] = 
        {
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,189,190,189,24,28,24,57,
            56,57,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,189,190,189,32,32,32,139,137,139,57,56,57,246,246,246,246,246,246,246,246,246,
            156,157,156,246,246,246,246,246,246,246,246,246,246,246,246,189,190,189,32,32,32,148,149,148,189,
            190,189,57,56,57,246,246,246,246,246,246,246,246,246,172,174,172,246,246,246,246,246,246,246,246,
            246,189,190,189,32,32,32,164,161,164,213,210,213,222,218,222,57,56,57,246,246,246,246,246,246,
            246,246,246,246,246,246,57,56,57,57,56,57,98,101,98,32,32,32,172,174,172,222,222,222,238,
            234,238,238,238,238,57,56,57,246,246,246,82,85,82,189,190,189,246,246,246,172,170,172,172,174,
            172,49,48,49,189,190,189,238,234,238,238,238,238,238,234,238,230,231,230,57,56,57,246,246,246,
            246,246,246,98,101,98,189,190,189,220,218,213,220,218,213,57,56,57,238,234,238,230,231,230,230,
            226,230,222,222,222,222,218,222,0,0,0,148,145,148,246,246,246,246,246,246,82,85,82,220,218,
            213,218,216,213,57,56,57,222,222,222,222,218,222,213,214,213,213,210,213,205,206,205,49,52,49,
            24,24,24,246,246,246,246,246,246,98,101,98,205,206,205,197,198,197,49,52,49,213,210,213,205,
            206,205,205,202,205,197,198,197,197,194,197,65,68,65,41,40,41,172,174,172,246,246,246,115,117,
            115,189,190,189,189,186,189,49,48,49,197,198,197,197,194,197,189,190,189,189,186,189,180,182,180,
            57,56,57,24,24,24,246,246,246,246,246,246,98,101,98,180,178,180,180,178,180,49,48,49,189,
            190,189,180,182,180,180,178,180,180,178,180,180,178,180,8,12,8,148,145,148,246,246,246,246,246,
            246,98,101,98,131,133,131,131,133,131,32,36,32,148,145,148,180,178,180,180,178,180,180,178,180,
            180,178,180,57,56,57,246,246,246,246,246,246,57,56,57,246,246,246,57,56,57,57,56,57,98,
            101,98,24,28,24,139,141,139,180,178,180,180,178,180,180,178,180,57,56,57,246,246,246,115,117,
            115,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,189,190,189,32,32,32,148,145,148,
            180,178,180,180,178,180,57,56,57,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,189,190,189,32,32,32,139,141,139,172,174,172,57,56,57,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            189,190,189,32,32,32,131,129,131,57,56,57,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,189,190,189,8,12,8,57,56,
            57,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,189,190,189,74,72,74,246,246,246,246,246,246,246,246,246,246,
            246,246
        };
        wxImage image( 13, 18, (unsigned char*)data, TRUE );
        image.SetMaskColour( 246, 246, 246);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 6)
    {
        static const unsigned char data[] = 
        {
            0,0,0,0,0,0,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,189,
            190,189,24,28,24,57,56,57,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,0,0,0,0,0,0,0,0,0,246,246,246,246,246,246,246,246,246,246,246,246,
            189,190,189,32,32,32,139,137,139,57,56,57,246,246,246,246,246,246,246,246,246,156,157,156,0,
            0,0,246,246,246,246,246,246,246,246,246,0,0,0,0,0,0,0,0,0,246,246,246,246,246,
            246,189,190,189,32,32,32,148,149,148,189,190,189,57,56,57,246,246,246,246,246,246,246,246,246,
            49,50,49,0,0,0,0,0,0,246,246,246,246,246,246,246,246,246,0,0,0,0,0,0,0,
            0,0,189,190,189,32,32,32,164,161,164,213,210,213,222,218,222,57,56,57,246,246,246,246,246,
            246,0,0,0,0,0,0,0,0,0,246,246,246,246,246,246,246,246,246,246,246,246,57,56,57,
            18,17,18,0,0,0,2,2,2,172,174,172,222,222,222,238,234,238,238,238,238,57,56,57,246,
            246,246,31,33,31,0,0,0,0,0,0,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,172,170,172,172,174,172,15,15,15,0,0,0,13,12,13,210,210,210,238,234,238,230,231,230,
            57,56,57,0,0,0,0,0,0,38,39,38,189,190,189,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,220,218,213,220,218,213,57,56,57,144,142,144,2,2,2,1,1,1,176,176,
            176,222,218,222,0,0,0,0,0,0,0,0,0,246,246,246,82,85,82,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,220,218,213,218,216,213,57,56,57,222,222,222,176,173,176,1,
            1,1,1,1,1,63,63,63,0,0,0,9,9,9,246,246,246,246,246,246,98,101,98,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,205,206,205,197,198,197,49,52,49,213,210,213,
            205,206,205,163,160,163,0,0,0,0,0,0,20,21,20,41,40,41,172,174,172,246,246,246,115,
            117,115,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,189,190,189,189,186,189,49,48,
            49,197,198,197,197,194,197,73,73,73,0,0,0,0,0,0,0,0,0,19,19,19,246,246,246,
            246,246,246,98,101,98,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,180,178,180,180,
            178,180,49,48,49,189,190,189,69,70,69,0,0,0,69,69,69,143,141,143,0,0,0,1,1,
            1,246,246,246,246,246,246,98,101,98,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            131,133,131,131,133,131,32,36,32,42,42,42,0,0,0,69,69,69,180,178,180,180,178,180,50,
            49,50,0,0,0,0,0,0,18,17,18,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,57,56,57,57,56,57,38,39,38,0,0,0,40,40,40,180,178,180,180,178,180,
            180,178,180,57,56,57,246,246,246,10,10,10,0,0,0,0,0,0,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,0,0,0,0,0,0,73,73,73,32,32,32,148,145,
            148,180,178,180,180,178,180,57,56,57,246,246,246,246,246,246,0,0,0,0,0,0,0,0,0,
            246,246,246,246,246,246,246,246,246,246,246,246,0,0,0,0,0,0,0,0,0,246,246,246,189,
            190,189,32,32,32,139,141,139,172,174,172,57,56,57,246,246,246,246,246,246,246,246,246,0,0,
            0,0,0,0,0,0,0,246,246,246,246,246,246,246,246,246,0,0,0,0,0,0,246,246,246,
            246,246,246,246,246,246,189,190,189,32,32,32,131,129,131,57,56,57,246,246,246,246,246,246,246,
            246,246,246,246,246,0,0,0,0,0,0,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,189,190,189,8,12,8,57,56,57,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,0,0,0,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,189,190,189,74,72,
            74,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
        };
        wxImage image( 18, 18, (unsigned char*)data, TRUE );
        image.SetMaskColour( 246, 246, 246);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 7)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 7 1",
        "  c None",
        "a c Black",
        "b c #FFFFFF",
        "c c #808080",
        "d c #008080",
        "e c #C0C0C0",
        "f c #FFDF9F",
        /* pixels */
        "           a    ",
        "  cccccca  d  a ",
        "  cfbbbb dfafa  ",
        "  cbbbbb fafaf  ",
        "  cbbbbbfafbfaaa",
        "  cbbbbbafafaf  ",
        "  cbbbbb dfafa  ",
        "  cbbbbba  d  a ",
        "  cbbbbb   a    ",
        "  cbbbbbbbbea   ",
        "  cbbbbbbbbba   ",
        "  cbbbbbbbbea   ",
        "  cbbbbbbbbba   ",
        "  ceeeeeeeeea   ",
        "  caaaaaaaaaa   ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 8)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 10 1",
        "  c None",
        "a c #9F9F3F",
        "b c #BF9F3F",
        "c c #9F9F7F",
        "d c #DFBF3F",
        "e c #5F5F3F",
        "f c #5F5F5F",
        "g c #FFDF9F",
        "h c #808000",
        "i c #FFFF9F",
        /* pixels */
        "                ",
        "                ",
        "                ",
        "  hhhh          ",
        " fgiggf         ",
        "hgigigghhhhha   ",
        "higigigigigif   ",
        "hgigigigigigh   ",
        "higigeeeeeeeeeee",
        "hgigeddddddddbf ",
        "higeddddddddbf  ",
        "hgeddddddddbf   ",
        "hebbbbbbbbbf    ",
        "cffffffffff     ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 9)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 12 1",
        "  c None",
        "a c Black",
        "b c #5F7FBF",
        "c c #A6CAF0",
        "d c #9F9F9F",
        "e c #FFFBF0",
        "f c #3F5F3F",
        "g c #3F3F5F",
        "h c #BFBFBF",
        "i c #C0C0C0",
        "j c #DFDFBF",
        "k c #3F5F9F",
        /* pixels */
        "           hhh  ",
        "          dfggd ",
        "         hfeeefh",
        "   hkkkkkkkkeefh",
        "  hkccccccccgegh",
        "bkkcckkgggggfgdi",
        "gkcccccgghihhhii",
        "gkccbgbcbgiiiiii",
        "gkcbgkggghiiiiii",
        "gkbkkkbcgijhhhii",
        "gkbbgkcghidfggdi",
        "bgggbggh hfehefh",
        "         hfhahfh",
        "         hgehegh",
        "          dfggd ",
        "           hhh  "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 10)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 7 1",
        "  c None",
        "a c #FFF26B",
        "b c #E5E104",
        "c c #E2C509",
        "d c #686800",
        "e c #7F5F3F",
        "f c #FFF200",
        /* pixels */
        "  dddd       d  ",
        "  daad      dd  ",
        "  dafd     dad  ",
        "  dafd    dafd  ",
        "  dffd   daffd  ",
        "  dffd  dafffd  ",
        "  dfbd dafffbd  ",
        "  dbbddaffffbe  ",
        "  dbce dfffbce  ",
        "  dbce  efbbce  ",
        "  dcce   ebcce  ",
        "  dcce    ecce  ",
        "  ecce     ece  ",
        "  ecce      ee  ",
        "  eeee       e  ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 11)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 15 1",
        "  c None",
        "a c #9F7F5F",
        "b c #BF7F3F",
        "c c #FFFFFF",
        "d c #BF9F7F",
        "e c #DFBF3F",
        "f c #BFBF7F",
        "g c #FFFBF0",
        "h c #3F5F3F",
        "i c #DFBF7F",
        "j c #3F3F5F",
        "k c #DFDF9F",
        "l c #DFDFBF",
        "m c #7F5F5F",
        "o c #7F7F5F",
        /* pixels */
        "                ",
        " hmhmhhhhhhmmhh ",
        " hghcccccglkjgj ",
        " hghcgggglgkhjj ",
        " hghcggglgkkhdj ",
        " hghcgglgkkfhdj ",
        " hgmcglgkkffjdj ",
        " hgmkkkkkfffjdj ",
        " hgejhhhhhjjedj ",
        " hgiiiiiiiiiedj ",
        " hgejjjjjjjjjdj ",
        " hgejaoaohlljdj ",
        " hgejoaobhlljdj ",
        " mgejaobbhlljdj ",
        "  jjjjjjjjjjjjj ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 12)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 16 1",
        "  c None",
        "a c Black",
        "b c #9F7F5F",
        "c c #BF7F3F",
        "d c #FFFFFF",
        "e c #BF9F7F",
        "f c #848284",
        "g c #DFBF3F",
        "h c #BFBF7F",
        "i c #FFFBF0",
        "j c #3F5F3F",
        "k c #3F3F5F",
        "l c #DFDF9F",
        "m c #5F5F5F",
        "n c #DFDFBF",
        "o c #7F5F5F",
        /* pixels */
        "                ",
        " jojojjjjojj    ",
        " jijdddnlkdk    ",
        " jijdindljkk    ",
        " jijdndlhjek    ",
        " jiolllhhkek    ",
        " jngkjjkkgek    ",
        " jieeeeeegek    ",
        " jngkkkkkkek    ",
        " jigkbcjnkek    ",
        " ongkcbjnkek    ",
        "  kkkkkkkkka    ",
        "                ",
        "        fm fm fm",
        "        ma ma ma",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 13)
    {
        static const unsigned char data[] = 
        {
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,224,224,224,223,
            223,223,219,219,219,219,219,219,223,223,223,224,224,224,224,224,224,224,224,224,224,224,224,224,224,
            224,223,223,223,219,219,219,219,219,219,223,223,223,224,224,224,224,224,224,186,186,186,169,169,169,
            84,84,84,56,56,56,177,177,177,188,188,188,188,188,188,188,188,188,188,188,188,186,186,186,169,
            169,169,95,95,95,95,95,95,169,169,169,186,186,186,188,188,188,180,180,180,128,128,128,146,146,
            146,38,38,38,175,175,175,188,188,188,188,188,188,188,188,188,188,188,188,180,180,180,128,128,128,
            162,162,162,150,150,150,121,121,121,180,180,180,188,188,188,186,186,186,180,180,180,172,172,172,56,
            56,56,175,175,175,188,188,188,188,188,188,188,188,188,188,188,188,186,186,186,177,177,177,165,165,
            165,120,120,120,169,169,169,186,186,186,188,188,188,188,188,188,186,186,186,162,162,162,17,17,17,
            163,163,163,186,186,186,188,188,188,188,188,188,188,188,188,186,186,186,166,166,166,71,71,71,146,
            146,146,175,175,175,186,186,186,188,188,188,188,188,188,180,180,180,95,95,95,0,0,0,95,95,
            95,180,180,180,188,188,188,188,188,188,188,188,188,180,180,180,95,95,95,0,0,0,38,38,38,
            105,105,105,180,180,180,188,188,188,150,150,150,147,147,147,133,133,133,129,129,129,133,133,133,147,
            147,147,150,150,150,150,150,150,150,150,150,147,147,147,133,133,133,129,129,129,129,129,129,133,133,
            133,147,147,147,150,150,150,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,100,100,100,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,100,100,100,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,106,106,106,57,57,57,106,106,106,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,106,106,106,57,57,57,106,106,106,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,106,106,106,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,106,106,106,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,57,57,57,71,71,71,84,84,84,85,85,85,85,85,85,85,85,85,84,
            84,84,71,71,71,57,57,57,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,78,78,78,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,78,78,78,246,246,246,246,246,246,246,246,246,246,246,246
        };
        wxImage image( 16, 16, (unsigned char*)data, TRUE );
        image.SetMaskColour( 246, 246, 246);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 14)
    {
        static const unsigned char data[] = 
        {
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,104,104,0,104,104,0,104,104,0,104,104,0,104,104,0,104,104,0,104,104,
            0,104,104,0,104,104,0,104,104,0,104,104,0,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,104,104,0,61,198,61,61,198,61,61,198,61,61,198,61,61,198,61,47,195,47,54,
            197,54,7,193,7,7,193,7,104,104,0,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,104,104,0,61,198,61,61,198,61,56,197,56,43,196,43,39,195,39,22,194,22,10,193,10,
            7,193,7,7,193,7,104,104,0,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,104,
            104,0,59,197,59,52,195,52,33,193,33,17,193,17,10,193,10,7,193,7,7,193,7,7,193,
            7,26,188,26,127,95,63,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,104,104,0,
            51,194,51,22,193,22,7,193,7,7,193,7,7,193,7,10,191,10,25,185,25,26,188,26,37,
            178,37,127,95,63,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,104,104,0,7,193,
            7,7,193,7,7,193,7,7,193,7,24,188,24,25,187,25,32,179,32,37,178,37,12,178,12,
            127,95,63,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,104,104,0,7,193,7,7,
            193,7,26,188,26,26,188,26,36,179,36,35,178,35,13,178,13,12,178,12,12,178,12,127,95,
            63,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,104,104,0,26,188,26,26,188,26,
            37,178,37,37,178,37,13,178,13,12,178,12,15,173,15,15,173,15,12,178,12,127,95,63,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,104,104,0,37,178,37,37,178,37,12,178,
            12,12,178,12,14,174,14,16,172,16,22,166,22,24,165,24,31,161,31,127,95,63,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,127,95,63,12,178,12,12,178,12,12,178,12,12,
            178,12,36,165,36,33,160,33,33,160,33,33,160,33,33,160,33,127,95,63,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,127,95,63,127,95,63,127,95,63,127,95,63,127,95,63,
            127,95,63,127,95,63,127,95,63,127,95,63,127,95,63,127,95,63,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,
            246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
        };
        wxImage image( 16, 16, (unsigned char*)data, TRUE );
        image.SetMaskColour( 246, 246, 246);
        wxBitmap bitmap( image );
        return bitmap;
    }
    if (index == 15)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 22 1",
        "  c None",
        "a c Black",
        "b c #ACA3A3",
        "c c #E1DBDB",
        "d c #545454",
        "e c #DBD5D5",
        "f c #AEA5A5",
        "g c #848284",
        "h c #BEBBBB",
        "i c #6C6C6C",
        "j c #DCD6D6",
        "k c #DFDADA",
        "l c #B7AEAE",
        "m c #B0A7A7",
        "n c #575757",
        "o c #D6D0D0",
        "p c #5F5F5F",
        "q c #8C8C8C",
        "r c #767676",
        "s c #E1DCDC",
        "t c #D7D1D1",
        "v c #959595",
        /* pixels */
        "                ",
        "     dd    q    ",
        "    dcd     q   ",
        "   dccd  q   q  ",
        " dddcsd   q  q  ",
        " djvkcdi  q  q  ",
        " dohtedn  q  q  ",
        " dddlmd   q  q  ",
        "   dfbd  r   q  ",
        "    dbd     q   ",
        "     dd    q    ",
        "                ",
        "                ",
        "        gp gp gp",
        "        pa pa pa",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 16)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 15 1",
        "  c None",
        "a c #E6DB25",
        "b c #E7DC24",
        "c c #E7DC25",
        "d c #FFF26B",
        "e c #8F7760",
        "f c #E8DD25",
        "g c #E5E104",
        "h c #E2C509",
        "i c #686800",
        "j c #E4D927",
        "k c #7F5F3F",
        "l c #E5DA24",
        "m c #E0D623",
        "n c #FFF200",
        /* pixels */
        "     i          ",
        "    ii          ",
        "   idiiiii      ",
        "  iddnnnndkk    ",
        " idnnnngffcdk   ",
        "  ingggcfffcdi  ",
        "   kgkkkkcfffhi ",
        "    kk   kfffbk ",
        "     k    kffmk ",
        "          ilflk ",
        "         idmfjk ",
        "     iiiidnfchk ",
        "     iddnnnfhk  ",
        "     idnnfahk   ",
        "     inffchk    ",
        "     kkkkke     "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 17)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 16 15 1",
        "  c None",
        "a c #E6DB25",
        "b c #E7DC24",
        "c c #E7DC25",
        "d c #FFF26B",
        "e c #8F7760",
        "f c #E8DD25",
        "g c #E5E104",
        "h c #E2C509",
        "i c #686800",
        "j c #E4D927",
        "k c #7F5F3F",
        "l c #E5DA24",
        "m c #E0D623",
        "n c #FFF200",
        /* pixels */
        "          i     ",
        "          ii    ",
        "      iiiiidi   ",
        "    kkdnnnnddi  ",
        "   kdcffgnnnndi ",
        "  idcfffcgggni  ",
        " ihfffckkkkgk   ",
        " kbfffk   kk    ",
        " kmffk    k     ",
        " klfli          ",
        " kjfmdi         ",
        " khcfndiiii     ",
        "  khfnnnddi     ",
        "   khafnndi     ",
        "    khcffni     ",
        "     ekkkkk     "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
